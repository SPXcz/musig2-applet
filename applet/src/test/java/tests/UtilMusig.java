package tests;

import applet.Constants;
import com.opencsv.CSVReaderHeaderAware;
import com.opencsv.exceptions.CsvValidationException;
import org.testng.Assert;

import javax.smartcardio.CommandAPDU;
import javax.smartcardio.ResponseAPDU;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.*;

public class UtilMusig {

    private static final List<String> LOADED_DATA = Arrays.asList(
            "privateKey",
            "publicKey",
            "aggregatePublicKey",
            "aggnonce",
            "secnonce"
    );

    // Generated by GitHub Copilot
    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

    public static List<byte[]> individualColumn(String csvSource, String compareKey) throws IOException, CsvValidationException {

        try (InputStream csvStream = AppletTest.class.getResourceAsStream(csvSource)) {
            assert csvStream != null;

            List<byte[]> compareData = new ArrayList<>();
            CSVReaderHeaderAware csvReader = new CSVReaderHeaderAware(new InputStreamReader(csvStream));
            Map<String, String> values;

            while ((values = csvReader.readMap()) != null) {
                byte[] compareDataByte = UtilMusig.hexStringToByteArray(values.get(compareKey));
                compareData.add(compareDataByte);
            }

            return compareData;
        }
    }

    public static List<byte[]> csvToApdus(String csvSource, Class<? extends BaseTest> testClass)
            throws IOException, CsvValidationException {

        try (InputStream csvStream = testClass.getResourceAsStream(csvSource)) {
            assert csvStream != null;

            List<byte[]> apduList = new ArrayList<>();
            CSVReaderHeaderAware csvReader = new CSVReaderHeaderAware(new InputStreamReader(csvStream));
            Map<String, String> values;

            while ((values = csvReader.readMap()) != null) {
                apduList.add(hashMapToApduData(values));
            }

            return apduList;
        }
    }

    public static byte[] hashMapToApduData(Map<String, String> csvMap) {

        byte[] apduData = new byte[]{
                Constants.STATE_FALSE, Constants.STATE_FALSE, Constants.STATE_FALSE,
                Constants.STATE_FALSE, Constants.STATE_FALSE
        };

        for (int i = 0; i < LOADED_DATA.size(); i++) {
            if (csvMap.containsKey(LOADED_DATA.get(i))
                    && csvMap.get(LOADED_DATA.get(i)) != null
                    && !Objects.equals(csvMap.get(LOADED_DATA.get(i)), "")) {

                if (i < 5) {
                    apduData[i] = Constants.STATE_TRUE;
                }

                byte[] asBytes = UtilMusig.hexStringToByteArray(csvMap.get(LOADED_DATA.get(i)));
                apduData = concatenate(apduData, asBytes);
            }
        }

        return apduData;
    }

    // Generated by GitHub Copilot
    public static byte[] concatenate(byte[] array1, byte[] array2) {
        byte[] result = new byte[array1.length + array2.length];
        System.arraycopy(array1, 0, result, 0, array1.length);
        System.arraycopy(array2, 0, result, array1.length, array2.length);
        return result;
    }

    public static byte[] concatenateDeter (HashMap<String, byte[]> data) {
        byte[] dataBytes = new byte[]{};

        dataBytes = concatenate(dataBytes, data.get("settings"));

        if (data.get("settings")[0] == Constants.STATE_TRUE) {
            dataBytes = concatenate(dataBytes, data.get("privateKey"));
        }

        if (data.get("settings")[1] == Constants.STATE_TRUE) {
            dataBytes = concatenate(dataBytes, data.get("publicKey"));
        }

        if (data.get("settings")[2] == Constants.STATE_TRUE) {
            dataBytes = concatenate(dataBytes, data.get("aggregatePublicKey"));
        }

        if (data.get("settings")[3] == Constants.STATE_TRUE) {
            dataBytes = concatenate(dataBytes, data.get("aggnonce"));
        }

        if (data.get("settings")[4] == Constants.STATE_TRUE) {
            dataBytes = concatenate(dataBytes, data.get("secnonce"));
        }

        return dataBytes;
    }


}
